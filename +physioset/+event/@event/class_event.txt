Class: event
============

[[Parent]]: pkg_event.txt

The `pset.event` class can be used to store, manipulate and process events 
in a pointset. 

A brief synopsis of the functionality provided by this class is shown 
below. See [help pset.event][pset-event-m] for more details. In the
following we will assume that the `event` class has been brought to the 
current namespace using:

    import pset.event;


[pset-event-m]: ./event.m.htm


## Construction

A default constructor is available, which can be used to initialize arrays
of objects:

    myEvent = pset.event; % An empty event object
    myArrayOfEvents = repmat(myEvent, 30, 40); % A 30x40 array of events

Object properties can be modified during construction using key/value 
pairs. For instance, the following command will create a 'QRS' event that
spans the whole duration of a QRS complex (100 samples) and that is
located around the position of the R-peak:

    ev = event(1000, 'Type', 'QRS', ...
        'Offset', -40, 'Duration', 100)

The first input argument needs to be the absolute position of this event 
marker from the beginning of the EEG datasets, in data samples. The 
`Offset` property can be used to specify that the described event is 
actually occuring before or after the event marker location. In this case, 
it occurs 40 samples before the event marker location.

### Class properties

__Type__

A string identifying the type of the event

__Sample__

The data sample at which the event marker is located

__Time__

The corresponding event time (in seconds)

__Value__

An optional property that can be used to store an event value

__Offset__

Can be used to specify that the event occurence is not at the same time as 
the location of the event marker but it is before (negative offset) or 
after (positive offset) the marker. The _Offset__ is given in samples.

__Duration__

Event duration in data samples

__TimeSpan__

Event duration in seconds

__Dims__

The data dimension(s), i.e. the EEG or MEG channels, to which the event 
marker refers to. If not applicable this property can be left empty.

__Info__

A struct that can contain any user-defined field. This property is used to
store user-defined properties using the `get()` and `set()` methods 
described below.

### Construction from Fieldtrip/EEGLAB structs

Construction can be performed based on an existing EEGLAB or Fieltrip 
structure with event information:

    myFtripEvent;   % A Fieltrip event structure
    myEventObj = event(myFtripEvent);

    myEEGLABEvent;  % An EEGLAB event structure
    myEventObj = event(myEEGLABEvent);

For consistency with other data structure within this package, it is likely
that construction from EEGLAB and Fieltrip objects will be performed in 
a future release using static constructors: `from_eeglab()`, `from_fieltrip()`.
However, the contruction interface shown above is likely to remain valid.


## Data coversion operations

A `pset.event` object can be easily converted into valid EEGLAB or Fieltrip
structs:

    myEvent = event(100, 'Type', 'beep');
    myEEGLABStruct = eeglab(myEvent);
    myFieltripStruct = fieldtrip(myEvent);

It can also be converted to a plain struct with field named as the 
properties of the original `pset.event` object:

    myEvent = event(100, 'Type', 'beep');
    myStruct = struct(myEvent);


## Accessors

Event properties can be accessed using the [get()][get-m] method:

[get-m]: ./get.m.htm

    myObj = event(100, 'Type', 'beep');
    strcmpi(get(myObj, 'Type'), 'beep') % Returns true

The unique values of certain event property accross an array of event 
objects can be obtained using method [unique()][unique-m]:

[unique-m]: ./unique.m.htm

    myArray = repmat(event, 3, 1);
    myArray(1) = event(100, 'Type', 'beep'); 
    myArray(2) = event(200, 'Type', 'silence'); 
    myArray(3) = event(300, 'Type', 'beep');      
    
    all(ismember(unique(myArray, 'Type'), {'beep', 'silence'})) % true


## Modifiers

Event properties can be modified using the `set()` method:

    myObj = event(100, 'Type', 'beep');
    myObj = set(myObj, 'Type', 'silence');
    strcmpi(get(myObj, 'Type'), 'silence') % Returns true

Indexed event types can be grouped using `group_types`:

    myArray = repmat(event, 3, 1);
    myArray(1) = event(100, 'Type', 'TR pulse 1'); % A TR pulse event
    myArray(2) = event(200, 'Type', 'TR pulse 2'); % Another TR pulse
    myArray(3) = event(300, 'Type', 'beep');       % A beep event
    
    myNewArray = group_types(myArray); 
    strcmpi(myNewArray(1).Type, 'TR pulse') % true
    strcmpi(myNewArray(2).Type, 'TR pulse') % true
	strcmpi(myNewArray(3).Type, 'beep')     % true

A subset of events can be _selected_ using method [select()][select-m]:

[select-m]: ./select.m.htm

    myEventArray; % An array of events of various types
    mySelection = select(myEventArray, 'Type', 'type1');
    % mySelection contains only those events of type 'type1'

An array of events can be sorted using method [sort()][sort-m]:

    mySortedEventArray = sort(myEventArray);

[sort-m]: ./sort.m.htm

    


## Other methods

Two `pset.event` instances can be tested for equality:

    myObj1 = event(100, 'Type', 'beep');
    myObj2 = event(100, 'Type', 'beep');
    myObj3 = event(120, 'Type', 'beep');
    
    myObj1 == myObj2 % Returns true
    myObj1 == myObj3 % Returns false



